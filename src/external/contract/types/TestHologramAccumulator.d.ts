/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TestHologramAccumulatorInterface extends ethers.utils.Interface {
  functions: {
    "DENOMINATOR()": FunctionFragment;
    "accept(address)": FunctionFragment;
    "accumulate(address)": FunctionFragment;
    "accumulateBatch(address[])": FunctionFragment;
    "changeCoefficient(address,uint256)": FunctionFragment;
    "undermine(address)": FunctionFragment;
    "undermineBatch(address[])": FunctionFragment;
    "weighted(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "accept", values: [string]): string;
  encodeFunctionData(functionFragment: "accumulate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "accumulateBatch",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeCoefficient",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "undermine", values: [string]): string;
  encodeFunctionData(
    functionFragment: "undermineBatch",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "weighted", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accept", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accumulate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accumulateBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "undermine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "undermineBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weighted", data: BytesLike): Result;

  events: {
    "Accept(address)": EventFragment;
    "Accumulate(address,address,uint256)": EventFragment;
    "AccumulateBatch(address,address[],uint256)": EventFragment;
    "ChangeCoefficient(address,uint256)": EventFragment;
    "Undermine(address,address,uint256)": EventFragment;
    "UndermineBatch(address,address[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Accept"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Accumulate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccumulateBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeCoefficient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Undermine"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UndermineBatch"): EventFragment;
}

export class TestHologramAccumulator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestHologramAccumulatorInterface;

  functions: {
    DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    accept(
      accessor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accumulate(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accumulateBatch(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeCoefficient(
      accessor: string,
      coefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    undermine(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    undermineBatch(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weighted(accessor: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  accept(
    accessor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  accumulate(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  accumulateBatch(
    accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeCoefficient(
    accessor: string,
    coefficient: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  undermine(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  undermineBatch(
    accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weighted(accessor: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    accept(accessor: string, overrides?: CallOverrides): Promise<void>;

    accumulate(account: string, overrides?: CallOverrides): Promise<void>;

    accumulateBatch(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    changeCoefficient(
      accessor: string,
      coefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    undermine(account: string, overrides?: CallOverrides): Promise<void>;

    undermineBatch(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    weighted(accessor: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Accept(accessor?: null): TypedEventFilter<[string], { accessor: string }>;

    Accumulate(
      caller?: null,
      account?: null,
      weight?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { caller: string; account: string; weight: BigNumber }
    >;

    AccumulateBatch(
      caller?: null,
      accounts?: null,
      weight?: null
    ): TypedEventFilter<
      [string, string[], BigNumber],
      { caller: string; accounts: string[]; weight: BigNumber }
    >;

    ChangeCoefficient(
      accessor?: null,
      coefficient?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { accessor: string; coefficient: BigNumber }
    >;

    Undermine(
      caller?: null,
      account?: null,
      weight?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { caller: string; account: string; weight: BigNumber }
    >;

    UndermineBatch(
      caller?: null,
      accounts?: null,
      weight?: null
    ): TypedEventFilter<
      [string, string[], BigNumber],
      { caller: string; accounts: string[]; weight: BigNumber }
    >;
  };

  estimateGas: {
    DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    accept(
      accessor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    accumulate(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    accumulateBatch(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeCoefficient(
      accessor: string,
      coefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    undermine(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    undermineBatch(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weighted(accessor: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accept(
      accessor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    accumulate(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    accumulateBatch(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeCoefficient(
      accessor: string,
      coefficient: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    undermine(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    undermineBatch(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weighted(
      accessor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
