/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PostManagerInterface extends ethers.utils.Interface {
  functions: {
    "accumulatorAddress()": FunctionFragment;
    "allDonations(uint256)": FunctionFragment;
    "allPosts(uint256)": FunctionFragment;
    "auroraAddress()": FunctionFragment;
    "burnUltraRare(uint256)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "cancelableAmount(uint256)": FunctionFragment;
    "computeDonationReceiptId(address,uint256,uint256)": FunctionFragment;
    "computeRefundRequestId(address,uint256)": FunctionFragment;
    "donate(uint256,string)": FunctionFragment;
    "eventAddress()": FunctionFragment;
    "isOpen(uint256)": FunctionFragment;
    "isRare(uint256)": FunctionFragment;
    "nameRegistryAddress()": FunctionFragment;
    "newPost(string,uint256,uint256)": FunctionFragment;
    "nextReceiptSeed()": FunctionFragment;
    "owner()": FunctionFragment;
    "postAddress()": FunctionFragment;
    "receiptAddress()": FunctionFragment;
    "refund(uint256)": FunctionFragment;
    "refundAddress()": FunctionFragment;
    "refundRequests(uint256)": FunctionFragment;
    "requestRefund(uint256,string)": FunctionFragment;
    "requireVoucher()": FunctionFragment;
    "setTokenRewardAmount(uint256)": FunctionFragment;
    "switchVoucherRequirement()": FunctionFragment;
    "tokenRewardAmount()": FunctionFragment;
    "totalValueLocked()": FunctionFragment;
    "ultraRareAddress()": FunctionFragment;
    "vaultAddress()": FunctionFragment;
    "voucherAddress()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawalAmount(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accumulatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allDonations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allPosts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auroraAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnUltraRare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelableAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeDonationReceiptId",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeRefundRequestId",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "eventAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOpen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nameRegistryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newPost",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextReceiptSeed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiptAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refundAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRefund",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireVoucher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "switchVoucherRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalValueLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ultraRareAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voucherAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalAmount",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accumulatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allPosts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auroraAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnUltraRare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeDonationReceiptId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeRefundRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOpen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nameRegistryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newPost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextReceiptSeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiptAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchVoucherRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ultraRareAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voucherAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalAmount",
    data: BytesLike
  ): Result;

  events: {
    "BurnUltraRare(uint256,uint256)": EventFragment;
    "CancelDonation(uint256,uint256,address,uint256)": EventFragment;
    "Donate(uint256,uint256,uint256,address,uint256,string)": EventFragment;
    "NewPost(uint256,string,address,uint256,uint256,uint256,uint256)": EventFragment;
    "ReachCapacity(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Refund(uint256,uint256,uint256,uint256)": EventFragment;
    "RequestRefund(uint256,address,uint256,string)": EventFragment;
    "Withdraw(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BurnUltraRare"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelDonation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Donate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReachCapacity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestRefund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class PostManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PostManagerInterface;

  functions: {
    accumulatorAddress(overrides?: CallOverrides): Promise<[string]>;

    allDonations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        receiptId: BigNumber;
        postId: BigNumber;
        serialNum: BigNumber;
        sender: string;
        amount: BigNumber;
        donateTime: BigNumber;
      }
    >;

    allPosts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        postId: BigNumber;
        metadata: string;
        capacity: BigNumber;
        periodSeconds: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        donatedCount: BigNumber;
        donatedSum: BigNumber;
        withdrawed: boolean;
      }
    >;

    auroraAddress(overrides?: CallOverrides): Promise<[string]>;

    burnUltraRare(
      receiptId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancel(
      receiptId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelableAmount(
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeDonationReceiptId(
      account: string,
      seed: BigNumberish,
      serialNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeRefundRequestId(
      account: string,
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    donate(
      postId: BigNumberish,
      metadata: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    eventAddress(overrides?: CallOverrides): Promise<[string]>;

    isOpen(postId: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    isRare(
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nameRegistryAddress(overrides?: CallOverrides): Promise<[string]>;

    newPost(
      metadata: string,
      capacity: BigNumberish,
      periodSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nextReceiptSeed(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    postAddress(overrides?: CallOverrides): Promise<[string]>;

    receiptAddress(overrides?: CallOverrides): Promise<[string]>;

    refund(
      receiptId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refundAddress(overrides?: CallOverrides): Promise<[string]>;

    refundRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    requestRefund(
      receiptId: BigNumberish,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requireVoucher(overrides?: CallOverrides): Promise<[boolean]>;

    setTokenRewardAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    switchVoucherRequirement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenRewardAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalValueLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    ultraRareAddress(overrides?: CallOverrides): Promise<[string]>;

    vaultAddress(overrides?: CallOverrides): Promise<[string]>;

    voucherAddress(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      postId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalAmount(
      postId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  accumulatorAddress(overrides?: CallOverrides): Promise<string>;

  allDonations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
      receiptId: BigNumber;
      postId: BigNumber;
      serialNum: BigNumber;
      sender: string;
      amount: BigNumber;
      donateTime: BigNumber;
    }
  >;

  allPosts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      postId: BigNumber;
      metadata: string;
      capacity: BigNumber;
      periodSeconds: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      donatedCount: BigNumber;
      donatedSum: BigNumber;
      withdrawed: boolean;
    }
  >;

  auroraAddress(overrides?: CallOverrides): Promise<string>;

  burnUltraRare(
    receiptId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancel(
    receiptId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelableAmount(
    receiptId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeDonationReceiptId(
    account: string,
    seed: BigNumberish,
    serialNum: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeRefundRequestId(
    account: string,
    receiptId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  donate(
    postId: BigNumberish,
    metadata: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  eventAddress(overrides?: CallOverrides): Promise<string>;

  isOpen(postId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isRare(receiptId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  nameRegistryAddress(overrides?: CallOverrides): Promise<string>;

  newPost(
    metadata: string,
    capacity: BigNumberish,
    periodSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nextReceiptSeed(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  postAddress(overrides?: CallOverrides): Promise<string>;

  receiptAddress(overrides?: CallOverrides): Promise<string>;

  refund(
    receiptId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refundAddress(overrides?: CallOverrides): Promise<string>;

  refundRequests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  requestRefund(
    receiptId: BigNumberish,
    metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requireVoucher(overrides?: CallOverrides): Promise<boolean>;

  setTokenRewardAmount(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  switchVoucherRequirement(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

  ultraRareAddress(overrides?: CallOverrides): Promise<string>;

  vaultAddress(overrides?: CallOverrides): Promise<string>;

  voucherAddress(overrides?: CallOverrides): Promise<string>;

  withdraw(
    postId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalAmount(
    postId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    accumulatorAddress(overrides?: CallOverrides): Promise<string>;

    allDonations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        receiptId: BigNumber;
        postId: BigNumber;
        serialNum: BigNumber;
        sender: string;
        amount: BigNumber;
        donateTime: BigNumber;
      }
    >;

    allPosts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        postId: BigNumber;
        metadata: string;
        capacity: BigNumber;
        periodSeconds: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        donatedCount: BigNumber;
        donatedSum: BigNumber;
        withdrawed: boolean;
      }
    >;

    auroraAddress(overrides?: CallOverrides): Promise<string>;

    burnUltraRare(
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(receiptId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cancelableAmount(
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeDonationReceiptId(
      account: string,
      seed: BigNumberish,
      serialNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeRefundRequestId(
      account: string,
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donate(
      postId: BigNumberish,
      metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    eventAddress(overrides?: CallOverrides): Promise<string>;

    isOpen(postId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    isRare(
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nameRegistryAddress(overrides?: CallOverrides): Promise<string>;

    newPost(
      metadata: string,
      capacity: BigNumberish,
      periodSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nextReceiptSeed(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    postAddress(overrides?: CallOverrides): Promise<string>;

    receiptAddress(overrides?: CallOverrides): Promise<string>;

    refund(receiptId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    refundAddress(overrides?: CallOverrides): Promise<string>;

    refundRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestRefund(
      receiptId: BigNumberish,
      metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireVoucher(overrides?: CallOverrides): Promise<boolean>;

    setTokenRewardAmount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    switchVoucherRequirement(overrides?: CallOverrides): Promise<void>;

    tokenRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

    ultraRareAddress(overrides?: CallOverrides): Promise<string>;

    vaultAddress(overrides?: CallOverrides): Promise<string>;

    voucherAddress(overrides?: CallOverrides): Promise<string>;

    withdraw(postId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawalAmount(
      postId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    BurnUltraRare(
      receiptId?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { receiptId: BigNumber; amount: BigNumber }
    >;

    CancelDonation(
      postId?: null,
      receiptId?: null,
      donee?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber],
      {
        postId: BigNumber;
        receiptId: BigNumber;
        donee: string;
        amount: BigNumber;
      }
    >;

    Donate(
      postId?: null,
      receiptId?: null,
      serialId?: null,
      applyer?: null,
      amount?: null,
      metadata?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, BigNumber, string],
      {
        postId: BigNumber;
        receiptId: BigNumber;
        serialId: BigNumber;
        applyer: string;
        amount: BigNumber;
        metadata: string;
      }
    >;

    NewPost(
      postId?: BigNumberish | null,
      metadata?: null,
      donee?: null,
      capacity?: null,
      periodSeconds?: null,
      startTime?: null,
      endTime?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        postId: BigNumber;
        metadata: string;
        donee: string;
        capacity: BigNumber;
        periodSeconds: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
      }
    >;

    ReachCapacity(
      postId?: BigNumberish | null,
      capacity?: null,
      endTime?: null,
      donatedCount?: null,
      donatedSum?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        postId: BigNumber;
        capacity: BigNumber;
        endTime: BigNumber;
        donatedCount: BigNumber;
        donatedSum: BigNumber;
      }
    >;

    Refund(
      receiptId?: null,
      postId?: null,
      requestId?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        receiptId: BigNumber;
        postId: BigNumber;
        requestId: BigNumber;
        amount: BigNumber;
      }
    >;

    RequestRefund(
      requestId?: null,
      sender?: null,
      receiptId?: null,
      metadata?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string],
      {
        requestId: BigNumber;
        sender: string;
        receiptId: BigNumber;
        metadata: string;
      }
    >;

    Withdraw(
      postId?: null,
      donee?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { postId: BigNumber; donee: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    accumulatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    allDonations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allPosts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    auroraAddress(overrides?: CallOverrides): Promise<BigNumber>;

    burnUltraRare(
      receiptId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancel(
      receiptId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelableAmount(
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeDonationReceiptId(
      account: string,
      seed: BigNumberish,
      serialNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeRefundRequestId(
      account: string,
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donate(
      postId: BigNumberish,
      metadata: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    eventAddress(overrides?: CallOverrides): Promise<BigNumber>;

    isOpen(postId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isRare(
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nameRegistryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    newPost(
      metadata: string,
      capacity: BigNumberish,
      periodSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nextReceiptSeed(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    postAddress(overrides?: CallOverrides): Promise<BigNumber>;

    receiptAddress(overrides?: CallOverrides): Promise<BigNumber>;

    refund(
      receiptId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refundAddress(overrides?: CallOverrides): Promise<BigNumber>;

    refundRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestRefund(
      receiptId: BigNumberish,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requireVoucher(overrides?: CallOverrides): Promise<BigNumber>;

    setTokenRewardAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    switchVoucherRequirement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalValueLocked(overrides?: CallOverrides): Promise<BigNumber>;

    ultraRareAddress(overrides?: CallOverrides): Promise<BigNumber>;

    vaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    voucherAddress(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      postId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalAmount(
      postId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accumulatorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allDonations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allPosts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auroraAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnUltraRare(
      receiptId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      receiptId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelableAmount(
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeDonationReceiptId(
      account: string,
      seed: BigNumberish,
      serialNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeRefundRequestId(
      account: string,
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donate(
      postId: BigNumberish,
      metadata: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    eventAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOpen(
      postId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRare(
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nameRegistryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newPost(
      metadata: string,
      capacity: BigNumberish,
      periodSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nextReceiptSeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiptAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refund(
      receiptId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refundAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestRefund(
      receiptId: BigNumberish,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requireVoucher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTokenRewardAmount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    switchVoucherRequirement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenRewardAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalValueLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ultraRareAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voucherAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      postId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalAmount(
      postId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
